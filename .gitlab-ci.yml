image:
  name: hashicorp/terraform:$TERRAFORM_VERSION
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

before_script:
  - terraform version

stages:
  - prepare
  - apply
  - destroy

# ▼ templates ==========================================================================================================

# environment (dev/staging/prod) ---------------------------------------------------------------------------------------
.tpl_env_dev: &tpl_env_dev
  variables:
    env: dev
    AWS_DEFAULT_REGION: $DEV_AWS_DEFAULT_REGION
    AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
  only:
    - master
  except:
    - schedules

.tpl_env_staging: &tpl_env_staging
  variables:
    env: staging
    AWS_DEFAULT_REGION: $STAGING_AWS_DEFAULT_REGION
    AWS_ACCESS_KEY_ID: $STAGING_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $STAGING_AWS_SECRET_ACCESS_KEY
  only:
    - tags
  except:
    - schedules

.tpl_env_prod: &tpl_env_prod
  variables:
    env: prod
    AWS_DEFAULT_REGION: $PROD_AWS_DEFAULT_REGION
    AWS_ACCESS_KEY_ID: $PROD_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $PROD_AWS_SECRET_ACCESS_KEY
  only:
    - tags
  except:
    - schedules

# prepare --------------------------------------------------------------------------------------------------------------
.tpl_stage_prepare: &tpl_stage_prepare
  stage: prepare
  tags:
    - docker
  script:
    - terraform init -backend-config=config/backend-${env}.conf
    - terraform validate -var-file=config/${env}.tfvars
    - terraform plan -var-file=config/${env}.tfvars

# apply ----------------------------------------------------------------------------------------------------------------
.tpl_stage_apply: &tpl_stage_apply
  stage: apply
  tags:
    - docker
  script:
    - terraform init -backend-config=config/backend-${env}.conf
    - terraform apply -auto-approve -var-file=config/${env}.tfvars

# apply ----------------------------------------------------------------------------------------------------------------
.tpl_stage_destroy: &tpl_stage_destroy
  stage: destroy
  tags:
    - docker
  script:
    - terraform init -backend-config=config/backend-${env}.conf
    - terraform destroy -auto-approve -var-file=config/${env}.tfvars

# ▲ templates ==========================================================================================================

# ▼ jobs ===============================================================================================================

# prepare --------------------------------------------------------------------------------------------------------------
prepare:dev:
  <<: *tpl_stage_prepare
  <<: *tpl_env_dev

prepare:staging:
  <<: *tpl_stage_prepare
  <<: *tpl_env_staging

prepare:prod:
  <<: *tpl_stage_prepare
  <<: *tpl_env_prod

# apply ----------------------------------------------------------------------------------------------------------------
apply:dev:
  <<: *tpl_stage_apply
  <<: *tpl_env_dev
  environment:
    name: DEV

apply:staging:
  <<: *tpl_stage_apply
  <<: *tpl_env_staging
  environment:
    name: STAGING

apply:prod:
  <<: *tpl_stage_apply
  <<: *tpl_env_prod
  environment:
    name: PROD
  when: manual

# destroy --------------------------------------------------------------------------------------------------------------
# this is a special for DEV stage only ... will be destroyed every evening to save money ;-)
# no separate templates (and DO NOT change this)
# only scheduled ...
# only with ENV via scheduler job
destroy:dev:scheduled:
  <<: *tpl_stage_destroy
  variables:
    env: $ENV
    AWS_DEFAULT_REGION: $DEV_AWS_DEFAULT_REGION
    AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
  only:
    - schedules
  when: always

# ▲ jobs ===============================================================================================================
